const mongoose = require('mongoose');
const { Schema, model } = mongoose;
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const UserSchema = new Schema({
    username: {
        type: String,
        required: true,
        lowercase: true,
        unique: true,
    },
    password: {
        type: String,
        required: true,
    },
}, { timestamps: true });

// methods
UserSchema.methods.comparePassword = async function (pass) {
    return await bcrypt.compare(pass, this.password);
};

UserSchema.methods.generateJWT = function () {
    const whatToSign = { _id: this._id };
    return jwt.sign(whatToSign, process.env.USER_JWT, { expiresIn: 60 * 60 * 24 })
};

// hooks
UserSchema.pre('save', async function () {
    if (this.isModified('password')) {
        const salt = await bcrypt.genSalt(10);
        const hash = await bcrypt.hash(this.password, salt, null)
        this.password = hash;
    }
});

UserSchema.pre('remove', async function () {

});

module.exports = model('User', UserSchema);